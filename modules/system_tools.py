# File: modules/system_tools.py (Refactored with a Central Handler)

import pyperclip
import os
import subprocess
import platform
import webbrowser
import re
from typing import Optional

current_os = platform.system().lower()
if current_os == 'windows':
    try:
        from comtypes import CLSCTX_ALL
        from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
        print("[System Tools] pycaw loaded successfully for Windows volume control.")
    except ImportError:
        print("[System Tools] WARNING: pycaw or comtypes not found. Volume control on Windows will be disabled.")
        AudioUtilities = None
else:
    AudioUtilities = None
    print(f"[System Tools] Running on {current_os}. Windows-specific features (pycaw) are disabled.")

def _read_clipboard():
    try:
        content = pyperclip.paste()
        return f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ñ‡∏∑‡∏≠:\n---\n{content}\n---" if content else "‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö"
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î: {e}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î"

def _write_to_clipboard(text: str):
    if not isinstance(text, str): return "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö"
    try:
        pyperclip.copy(text)
        return "‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß"
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î: {e}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î"

def _open_application(app_name: str) -> str:
    app_name_lower = app_name.lower().strip()
    command = ""
    thai_to_eng_app = {
        '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç': 'calculator',
        '‡πÇ‡∏ô‡πâ‡∏ï‡πÅ‡∏û‡∏î': 'notepad',
        '‡πÇ‡∏Ñ‡∏£‡∏°': 'chrome',
        '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå': 'browser',
        '‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î': 'word',
        '‡πÄ‡∏≠‡πá‡∏Å‡πÄ‡∏ã‡∏•': 'excel',
        '‡∏û‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏≠‡∏¢‡∏ó‡πå': 'powerpoint',
        '‡∏™‡∏õ‡∏≠‡∏ï‡∏¥‡∏ü‡∏≤‡∏¢': 'spotify',
        '‡∏ß‡∏µ‡πÄ‡∏≠‡∏™‡πÇ‡∏Ñ‡πâ‡∏î': 'vscode',
    }
    app_map = {
        'notepad': {'windows': 'notepad.exe', 'darwin': 'open -a TextEdit', 'linux': 'gedit'},
        'calculator': {'windows': 'calc.exe', 'darwin': 'open -a Calculator', 'linux': 'gnome-calculator'},
        'browser': {'windows': r'start chrome', 'darwin': 'open -a "Google Chrome"', 'linux': 'google-chrome-stable'},
        'chrome': {'windows': r'start chrome', 'darwin': 'open -a "Google Chrome"', 'linux': 'google-chrome-stable'},
        'vscode': {'windows': 'code', 'darwin': 'code', 'linux': 'code'},
        'spotify': {'windows': 'spotify', 'darwin': 'open -a Spotify', 'linux': 'spotify'},
        'word': {'windows': 'winword'},
        'excel': {'windows': 'excel'},
        'powerpoint': {'windows': 'powerpnt', 'darwin': 'open -a "Microsoft PowerPoint"'},
    }
    app_key = thai_to_eng_app.get(app_name_lower, app_name_lower)
    if app_key in app_map:
        command = app_map[app_key].get(current_os)
    if not command:
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î '{app_name}' ‡∏ö‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ({current_os})"
    try:
        print(f"[System Tools] Executing command: {command}")
        subprocess.Popen(command, shell=True)
        return f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î {app_name} ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö..."
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: {e}")
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î {app_name}"

def _open_website(site_name: str) -> str:
    site_map = {
        'youtube': 'https://www.youtube.com', 'facebook': 'https://www.facebook.com',
        'google': 'https://www.google.com', 'gmail': 'https://mail.google.com',
        'github': 'https://www.github.com'
    }
    url = site_map.get(site_name.lower().strip())
    if not url:
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå '{site_name}'"
    try:
        print(f"[System Tools] Opening website: {url}")
        webbrowser.open_new_tab(url)
        return f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î {site_name.capitalize()} ‡πÉ‡∏´‡πâ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡∏ö"
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: {e}")
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î {site_name}"

def _set_system_volume(level: int) -> str:
    if not 0 <= level <= 100:
        return "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0 ‡∏ñ‡∏∂‡∏á 100 ‡∏Ñ‡∏£‡∏±‡∏ö"
    print(f"[System Tools] Setting volume to {level}% on {current_os}")
    try:
        if current_os == 'windows':
            if not AudioUtilities: raise NotImplementedError("Volume control disabled (pycaw missing).")
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = interface.QueryInterface(IAudioEndpointVolume)
            volume.SetMasterVolumeLevelScalar(level / 100.0, None)
        elif current_os == 'darwin':
            subprocess.run(['osascript', '-e', f'set volume output volume {level}'])
        elif current_os == 'linux':
            subprocess.run(['amixer', '-D', 'pulse', 'sset', 'Master', f'{level}%'])
        return f"‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô {level}% ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏ô {current_os}"

def _get_current_volume() -> Optional[int]:
    try:
        if current_os == 'windows':
            if not AudioUtilities: return None
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume = interface.QueryInterface(IAudioEndpointVolume)
            return round(volume.GetMasterVolumeLevelScalar() * 100)
        elif current_os == 'darwin':
            result = subprocess.run(['osascript', '-e', 'output volume of (get volume settings)'], capture_output=True, text=True)
            return int(result.stdout.strip())
        elif current_os == 'linux':
            result = subprocess.run(['amixer', '-D', 'pulse', 'sget', 'Master'], capture_output=True, text=True)
            match = re.search(r"\[(\d{1,3})%\]", result.stdout)
            if match: return int(match.group(1))
        return None
    except Exception as e:
        print(f"‚ùå [System Tools] Error getting current volume: {e}")
        return None

def _change_volume(direction: str, amount: int = 10) -> str:
    current_level = _get_current_volume()
    if current_level is None:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ"
        
    if direction == "increase":
        new_level = min(current_level + amount, 100)
        print(f"üîä Increasing volume from {current_level}% to {new_level}%")
        return _set_system_volume(new_level)
    elif direction == "decrease":
        new_level = max(current_level - amount, 0)
        print(f"üîâ Decreasing volume from {current_level}% to {new_level}%")
        return _set_system_volume(new_level)
    else:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏±‡πâ‡∏ô"

# ==============================================================================
# Public Handler Function (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main.py)
# ==============================================================================

def handle_system_tool_query(query: str) -> Optional[str]:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠, ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
    """
    q_lower = query.lower()

    # --- Volume Control ---
    set_volume_match = re.search(r"(‡∏õ‡∏£‡∏±‡∏ö|‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤)\s*‡πÄ‡∏™‡∏µ‡∏¢‡∏á\s*(?:‡πÄ‡∏õ‡πá‡∏ô|‡πÑ‡∏õ‡∏ó‡∏µ‡πà)?\s*(\d{1,3})", q_lower)
    if set_volume_match:
        return _set_system_volume(int(set_volume_match.group(2)))
    
    if "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á" in q_lower:
        return _change_volume("increase")
    
    if "‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á" in q_lower:
        return _change_volume("decrease")

    # --- Application & Website Control ---
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    open_app_match = re.search(r"‡πÄ‡∏õ‡∏¥‡∏î(‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°|‡πÅ‡∏≠‡∏õ)?\s+([\w‡∏Å-‡πô_.-]+)", q_lower)
    if open_app_match:
        entity_name = open_app_match.group(2)
        if entity_name in ['youtube', 'facebook', 'google', 'gmail', 'github']:
            return _open_website(entity_name)
        else:
            return _open_application(entity_name)
    
    open_site_match = re.search(r"‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö\s+(.+)", q_lower)
    if open_site_match:
        return _open_website(open_site_match.group(1))

    # --- Clipboard Control ---
    write_clip_match = re.search(r"(‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å|copy)\s*(‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)?\s*['\"](.+)['\"]", query, re.IGNORECASE)
    if write_clip_match:
        return _write_to_clipboard(write_clip_match.group(3))
        
    if "‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î" in q_lower or "‡πÉ‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£" in q_lower:
        return _read_clipboard()

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    return None