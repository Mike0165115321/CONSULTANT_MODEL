import os
import json
import faiss
import numpy as np
import sys
from sentence_transformers import SentenceTransformer

def load_data(data_folder):
    texts = []
    mapping = {}
    idx = 0

    if not os.path.exists(data_folder):
        print(f"‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{data_folder}' ‡πÑ‡∏°‡πà‡∏û‡∏ö")
        return texts, mapping

    for filename in sorted(os.listdir(data_folder)):
        if not filename.endswith(".jsonl"): continue

        path = os.path.join(data_folder, filename)
        print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {filename}")
        try:
            with open(path, "r", encoding="utf-8") as f:
                for line_num, line in enumerate(f, 1):
                    if not line.strip(): continue
                    
                    try:
                        item = json.loads(line)
                        content = item.get("content", "").strip()

                        if content:
                            book = item.get("book_title", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏").strip()
                            category = item.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà").strip()
                            chapter = item.get("chapter_title", "").strip()
                            title = item.get("title", "").strip()
                            
                            context_parts = [f"‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ '{book}'", f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category}'"]
                            if chapter: context_parts.append(f"‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢ '{chapter}'")
                            if title: context_parts.append(f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ '{title}'")
                            
                            embedding_text = ", ".join(context_parts) + f": {content}"
                            
                            texts.append(embedding_text)
                            
                            mapped_item = item.copy()
                            mapped_item['embedding_text'] = embedding_text
                            mapping[str(idx)] = mapped_item
                            idx += 1
                        else:
                            print(f"  ‚ùó ‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {line_num}: ‡πÑ‡∏°‡πà‡∏û‡∏ö 'content' ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")

                    except json.JSONDecodeError as e:
                        print(f"  ‚ùå ‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {line_num} ‡∏≠‡πà‡∏≤‡∏ô JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏î‡πâ: {e}")

    return texts, mapping

def create_faiss_index(texts, model_name="paraphrase-multilingual-MiniLM-L12-v2"):
    model = SentenceTransformer(model_name)
    print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Embeddings ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà)...")
    embeddings = model.encode(texts, convert_to_numpy=True, show_progress_bar=True).astype("float32")
    dim = embeddings.shape[1]
    index = faiss.IndexFlatL2(dim)
    index.add(embeddings)
    return index

def save_index_and_mapping(index, mapping, index_folder="./index"):
    os.makedirs(index_folder, exist_ok=True)
    faiss_path = os.path.join(index_folder, "faiss.index")
    mapping_path = os.path.join(index_folder, "mapping.json")
    print(f"\nüíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Index ‡πÑ‡∏õ‡∏ó‡∏µ‡πà '{faiss_path}'...")
    faiss.write_index(index, faiss_path)
    print(f"üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Mapping ‡πÑ‡∏õ‡∏ó‡∏µ‡πà '{mapping_path}'...")
    with open(mapping_path, "w", encoding="utf-8") as f:
        json.dump(mapping, f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    data_folder = "data"
    index_output_folder = "./index"
    
    if not os.path.exists(data_folder):
        print(f"‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{data_folder}' ‡πÑ‡∏°‡πà‡∏û‡∏ö")
        sys.exit(1)

    if not os.path.exists(index_output_folder):
        os.makedirs(index_output_folder)
        print(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{index_output_folder}' ‡πÅ‡∏•‡πâ‡∏ß")

    print("\n--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Index ---")
    texts, mapping = load_data(data_folder)

    if not texts:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Index ‡πÑ‡∏î‡πâ, ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        sys.exit(1)

    print(f"\nüì¶ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Index ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(texts)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    index = create_faiss_index(texts)
    save_index_and_mapping(index, mapping)
    print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á faiss.index ‡πÅ‡∏•‡∏∞ mapping.json ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")